#!/usr/bin/env bash

set -e

# shellcheck source=../bin/utils.sh
source "$(dirname "$0")/utils.sh"

install_erlang() {
  ensure_kerl_setup
  local asdf_activation_version
  local build_name

  build_name="asdf_$ASDF_INSTALL_VERSION"

  export MAKEFLAGS="-j$ASDF_CONCURRENCY"

  $(kerl_path) delete installation "$build_name" || true
  $(kerl_path) delete build "$build_name" || true

  if [ "$ASDF_INSTALL_TYPE" = "ref" ]; then
    asdf_activation_version="$ASDF_INSTALL_TYPE:$ASDF_INSTALL_VERSION"
    $(kerl_path) build git "${OTP_GITHUB_URL:-https://github.com/erlang/otp.git}" "$ASDF_INSTALL_VERSION" "$build_name"
  else
    asdf_activation_version="$ASDF_INSTALL_VERSION"
    $(kerl_path) build "$ASDF_INSTALL_VERSION" "$build_name"
  fi

  $(kerl_path) install "$build_name" "$ASDF_INSTALL_PATH"
  $(kerl_path) cleanup "$ASDF_INSTALL_VERSION"

  link_app_executables "$ASDF_INSTALL_PATH"

  echo
  echo "Erlang $ASDF_INSTALL_VERSION has been installed. Activate globally with:"
  echo
  echo "    asdf global erlang $asdf_activation_version"
  echo
  echo "Activate locally in the current folder with:"
  echo
  echo "    asdf local erlang $asdf_activation_version"
  echo
}

link_app_executables() {
    local install_path=$1

    # Link other executables to the bin directory so that asdf shims are created for them
    cd "$install_path/bin"
    
    # ln call may fail if multiple executables are found with the same name
    ln -s ../lib/*/bin/* ../lib/*/priv/bin/* . || true
}

print_failure_message() {
  printf 'Failed to install Erlang. See previous output for more details.\n'
}

install_erlang && exit_code=$? || exit_code=$?

if [ "$exit_code" -ne 0 ]; then
  print_failure_message
fi

exit "$exit_code"
